Parse Proof(x y z);
Parse {x: a | p };
Parse Power(x y z);
Parse Pred(x, a);

Definition non_normal: PROP := ((x: PROP) |-> x) ((x: PROP) -> x);
Normalize non_normal;
Normalize Proof(non_normal);
Normalize {x: non_normal | non_normal};
Normalize Power(non_normal non_normal);
Normalize Pred(non_normal, non_normal);

Normalize Pred(x, {y: a | p y});

Check Proof(non_normal): non_normal;

Assume a: SET;
Assume p: (x: a) -> PROP;
Assume elm_sub: {x: a | p x};
Assume b: Power(a);
Assume elm_b: b;

Parse {x: a | p x};
Infer {x: a | p x};
Check {x: a | p x}: Power(a);
Check {x: a | p x}: SET;
Check b: Power(a);
Check b: SET;
Check elm_sub: {x: a | p x};
Check elm_b: {x: a | p x};
Check elm_b: b;

Assume x1: SET;
Assume x2: Power(x1);
Assume pr: (x: x1) -> PROP;
Assume x3: Power(x2);
Assume bottom_elm: {x: x3 | pr x};

Parse Id(x, a = b);
Parse Refl(x, a);
Parse Exists x;
Parse Take (x: a) |-> b;
