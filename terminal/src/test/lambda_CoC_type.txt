Check PROP: UNIV;
Check SET: UNIV;
Check (p: PROP) -> p : PROP;
Check (p: PROP) -> PROP: UNIV;
Check (x: PROP) |-> x: (x: PROP) -> PROP ;
Check ( ((x:PROP) |-> x) ((p: PROP) -> p) ) : PROP ;

Infer PROP;
Infer (x: PROP) -> x;

Assume assum_x: PROP;

Check assum_x: PROP;
Check (((x: PROP) |-> (y: PROP) |-> x) assum_x): (y: PROP) -> PROP;

Assume bool: PROP;
Assume b_to_p : (_: bool) -> PROP;
Assume p_to_b : (_: PROP) -> bool;
Check ((x: PROP) |-> (b_to_p (p_to_b x))) : (x: PROP) -> PROP; 

Definition false: PROP := (x: PROP) -> x ;
Normalize false;
BetaEq (false) = ((x: PROP) -> x) ;
BetaEq (x: PROP) -> false = (x: PROP) -> (x: PROP) -> x;

Definition test_func (x: PROP) (y: PROP): PROP := x;
