Assumption x: SET;
Assumption r: x -> x -> PROP;

Assumption refl_of_r: (a: x) -> r a a;
Assumption symm_of_r: (a: x) -> (b: x) -> r a b -> r b a;
Assumption trans_of_r: (a: x) -> (b: x) -> (c: x) -> r a b -> r b c -> r a c;

Definition rel_sym_set (a: x): Power(x) := { y: x | r a y };

Assumption elem_of_x1: x;
Assumption elem_of_x2: x;

Definition leibniz_eq (t: SET) (t1: t) (t2: t): PROP := (p: t -> PROP) -> p t1 -> p t2;

Definition is_rel_by_sym (x1: x) (x2: x): PROP := (leibniz_eq Power(x) (rel_sym_set x1) (rel_sym_set x2)) -> r x1 x2;

Definition quotient_set: Power(Power(x)) := { sub_x: Power(x) | Exists {y: x | Id(Power(x), sub_x = rel_sym_set y) } };

Check (rel_sym_set elem_of_x1) : quotient_set;
