Inductive Nat: SET with
    | Zero: Nat
    | Succ: (Nat) -> Nat
;

Def add: (_: Nat) -> (_: Nat) -> Nat :=
    \n:Nat.
    elim(Nat) n return (\_: Nat. (_: Nat) -> Nat) with
    | Zero => \m: Nat. m
    | Succ => \_: Nat. \g: ((_: Nat) -> Nat). \n: Nat.  (Nat::Succ (g n))
    end
;

Infer (add Nat::Zero Nat::Zero);
Normalize (add Nat::Zero Nat::Zero);

Infer (add (Nat::Succ Nat::Zero) (Nat::Succ Nat::Zero));
Normalize (add (Nat::Succ Nat::Zero) (Nat::Succ Nat::Zero));
