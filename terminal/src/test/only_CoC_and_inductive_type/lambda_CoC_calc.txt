Parse x;
Parse y;
Parse PROP;
Parse SET;
Parse TYPE;
Parse UNIV(0);

Parse (((((((UNIV(0)))))))) ;

Parse (p: PROP) -> p ;
Parse (x: PROP) |-> x ;
Parse (x y);
Parse ((x y) (x: UNIV(0)) -> a) ;

Parse (_: PROP) -> x;
Parse (_: PROP) |-> PROP;
Parse (x y z);

AlphaEq x = x;
!AlphaEq x = z /* fail */;

AlphaEq (x: PROP) |-> x = (x: PROP) |-> x ;
AlphaEq (x: PROP) |-> x = (y: PROP) |-> y ;
!AlphaEq (x: PROP) |-> x = (y: PROP) |-> x /* fail */ ;
!AlphaEq (y: PROP) |-> y = (y: PROP) |-> x /* fail */ ;
AlphaEq (y: PROP) |-> x = (z: PROP) |-> x ;

AlphaEq (x: PROP) -> x = (x: PROP) -> x;
AlphaEq (x: PROP) -> x = (y: PROP) -> y;

AlphaEq (x: PROP) |-> (y: PROP) |-> y = (x: PROP) |-> (x: PROP) |-> x ;
AlphaEq (x: PROP) |-> (y: PROP) |-> y = (y: PROP) |-> (x: PROP) |-> x ;
!AlphaEq (x: PROP) |-> (y: PROP) |-> x = (x: PROP) |-> (y: PROP) |-> y /* fail */ ;
!AlphaEq (x: PROP) |-> (y: PROP) |-> x = (x: PROP) |-> (y: PROP) |-> y /* fail */ ;
!AlphaEq (x: PROP) |-> (y: PROP) |-> x = (x: PROP) |-> (y: PROP) |-> y /* fail */ ;
!AlphaEq (x: PROP) |-> (y: PROP) |-> x = (x: PROP) |-> (y: PROP) |-> y /* fail */ ;
!AlphaEq (x: PROP) |-> (y: PROP) |-> x = (x: PROP) |-> (y: PROP) |-> y /* fail */ ;

Subst x[x := z] /* z */ ;
Subst y[x := z] /* y */ ;
Subst (x: PROP) |-> x [x := y] /* \x: PROP. x */;
Subst (x: PROP) |-> x [z := y] /* \x: PROP. x */;
Subst (x: PROP) |-> y [y := z] /* \x: PROP. z */;
Subst (x: PROP) |-> y [y := x] /* \x0: PROP. x */;
Subst (x: PROP) |-> ( (y: PROP) |-> x y z ) ((x: PROP) |-> x y z) [x := t] ;
Subst (x: PROP) |-> ( (y: PROP) |-> x y z ) ((x: PROP) |-> x y z) [y := x] ;
Subst (x: PROP) |-> ( (y: PROP) |-> x y z ) ((x: PROP) |-> x y z) [y := z] ;
Subst (x: PROP) |-> ( (y: PROP) |-> x y z ) ((x: PROP) |-> x y z) [z := x] ;
Subst (x: PROP) |-> ( (y: PROP) |-> x y z ) ((x: PROP) |-> x y z) [z := y] ;

/* test */

TopReduce (((x: PROP) |-> x) y);

Normalize ((x:PROP) |-> x) ((p: PROP) -> p) ;

Parse (x: a) |-> (y: b) -> c;
