Inductive Nat: SET with
    | Zero: Nat
    | Succ: [Nat] -> Nat
;

Inductive Bool: SET with
    | True: Bool
    | False: Bool
;

Definition is_zero (n: Nat): Bool :=
    elim(Nat) n return (_: Nat) |-> Bool /* P */ with
    | Zero =>  Bool::True /* : P 0 */
    | Succ => (_: Nat) |-> (_: (_: Nat) -> Bool) |-> (_: Nat) |-> Bool::False /* : (n: nat) -> P n -> P (S n) */
end
;
