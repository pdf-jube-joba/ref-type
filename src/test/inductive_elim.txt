Inductive Bool: SET with
    | True: Bool
    | False: Bool
;

Parse elim(Bool) Bool::True return \b: Bool. Bool with | Bool::True | Bool::False end ;
Infer elim(Bool) Bool::True return \b: Bool. Bool with | Bool::True | Bool::False end ;

TopReduce elim(Bool) Bool::True return \b: Bool. Bool with | Bool::True | Bool::False end ;

Inductive Nat: SET with
    | Zero: Nat
    | Succ: (Nat) -> Nat
;

TopReduce elim(Bool) Bool::True return \b: Bool. Nat with | Nat::Zero | (Nat::Succ Nat::Zero) end ;

Def if_statement: (a: SET) -> (x1: a) -> (x2: a) -> (b: Bool) -> a :=
    \a: SET . \x1: a . \x2: a. \b: Bool.  
    elim(Bool) b return \b: Bool. a with
    | x1
    | x2
    end
;

Normalize (if_statement Nat (Nat::Zero) (Nat::Succ Nat::Succ) Bool::False);
Normalize (if_statement Nat (Nat::Zero) (Nat::Succ Nat::Succ) Bool::True);

Def add_nat: (n: Nat) -> (m: Nat) -> Nat :=
    \n: Nat . \m: Nat.
    elim(Nat) n return \n: Nat. Nat with
    | m
    | \n: Nat. ((Nat::Succ) n)
    end
;
