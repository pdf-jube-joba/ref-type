Inductive Void: SET with
;

Parse Void;
Check Void: SET;

Inductive Bool: SET with
    | True: Bool
    | False: Bool
;

Parse Bool;
Parse (Bool::True Bool::False);
Check Bool: SET;
Check Bool::True: Bool;

Inductive Nat : SET with
    | Zero: Nat
    | Succ: (Nat) -> Nat
;

Parse Nat;
Parse Nat::Zero;

Check Nat: SET;
Check Nat::Zero: Nat;
Check Nat::Succ: (_: Nat) -> Nat;
Check (Nat::Succ (Nat::Zero)) : Nat;

Inductive Even: (n: Nat) -> PROP with
    | EvenZero: Even Nat::Zero
    | EvenSucc: (n: Nat) -> (Even n) -> Even (Nat::Succ (Nat::Succ n))
;

Inductive List: (a: SET) -> SET with
    | Nil: (a: SET) -> List a
/* it fails because type of Nil cannot be sort SET
    [ List: ((a: SET) -> SET) |- ((a: SET) -> List a): SET ]
    does not hold caused by (TYPE, SET) not in Rel */ ;

Inductive NatList: SET with
    | Nil: NatList
    | Cons: (_: Nat) -> (NatList) -> NatList
;

Inductive Id: (a: SET) -> (x: a) -> (y: a) -> PROP with
    | Refl : (a: SET) -> (x: a) -> Id a x x
;
