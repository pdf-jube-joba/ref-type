Definition prod: ((a: SET) -> (b: SET) -> SET) :=
    ((a: SET) |-> (b: SET) |->  (c: SET) -> (_: (_: a) -> (_: a) -> c) -> c)
/* SET is predicative so it fails
( a: SET, b: SET |- ((c: SET) -> (_: ) |->) |-> |-> -> c: SET )
needs (UNIV, SET) in rel
*/ ;

Inductive Bool: SET with
    | True: Bool
    | False: Bool
;

Definition if_statement: (a: SET) -> (x1: a) -> (x2: a) -> (b: Bool) -> a :=
    (a: SET ) |-> (x1: a ) |-> (x2: a) |-> (b: Bool) |->  
    elim(Bool) b return (b: Bool) |-> a with
    | True => x1
    | False => x2
    end
;

!Definition if_statement2: (a: UNIV) -> (x1: a) -> (x2: a) -> (b: Bool) -> a :=
    (a: UNIV ) |-> (x1: a ) |-> (x2: a) |-> (b: Bool) |->  
    elim(Bool) b return (b: Bool) |-> a with
    | True => x1
    | False => x2
    end
;

Definition prod_bool_form (a: SET) (b: SET): SET :=
    (c: Bool) -> elim(Bool) c return (_: Bool) |-> SET with
    | True => a
    | False => b
    end
/* こっちは成功するんだ */;

Definition prod_bool_intro (a: SET) (b: SET) (x: a) (y: b): (prod_bool_form a b) :=
        /* (c: Bool) -> elim(Bool) c return (c: Bool) |-> SET with | True => a | False => b end */
    (c: Bool) |->
    elim(Bool) c return
        (d: Bool) |-> elim(Bool) d return ((_: Bool) |-> SET) with | True => a | False => b end
    with
    | True => x
    | False => y
    end    
;

Definition prod_bool_projection1 (a: SET) (b: SET) (t: (prod_bool_form a b)): a := (t Bool::True);
Definition prod_bool_projection2 (a: SET) (b: SET) (t: (prod_bool_form a b)): b := (t Bool::False);

Assummption a: SET;
Assummption b: SET;
Assummption x: a;
Assummption y: b;

Definition product: (prod_bool_form a b) := (prod_bool_intro a b x y);
Check (prod_bool_projection1 a b product): a;
Check (prod_bool_projection2 a b product): b;
Normalize (prod_bool_projection1 a b product);
Normalize (prod_bool_projection2 a b product);
