Inductive Bool: SET with
    | True: Bool
    | False: Bool
;

Definition negb (b: Bool): Bool :=
    elim(Bool) b return (_: Bool) |-> Bool with
    | True => Bool::False
    | False => Bool::True
    end
;

Definition andb (b1: Bool) (b2: Bool): Bool :=
    elim(Bool) b1 return (_: Bool) |-> Bool with
    | True => b2
    | False => negb b1
    end
;

Definition orb (b1: Bool) (b2: Bool): Bool :=
    elim(Bool) b1 return (_: Bool) |-> Bool with
    | True => Bool::True
    | False => b2
    end
;

Inductive Nat: SET with
    | Zero: Nat
    | Succ: [Nat] -> Nat
;

Definition nat_zero: Nat := Nat::Zero;
Definition nat_one: Nat := (Nat::Succ Nat::Zero);
Definition nat_two: Nat := (Nat::Succ (Nat::Succ Nat::Zero));

Definition is_zero (n: Nat): Bool :=
    elim(Nat) n return (_: Nat) |-> Bool /* P */ with
    | Zero =>  Bool::True /* : P 0 */
    | Succ => (_: Nat) |-> (_: Bool) |-> Bool::False /* : (n: nat) -> P n -> P (S n) */
    end
;

Normalize is_zero nat_zero;
Normalize is_zero nat_one;
Normalize is_zero nat_two;

Definition pred (n: Nat): Nat :=
    elim(Nat) n return (_: Nat) |-> Nat with
    | Zero => Nat::Zero
    | Succ => (l: Nat) |-> (g: Nat) |-> l
    end
;

Normalize pred nat_zero;
Normalize pred nat_one;
Normalize pred nat_two;

Definition nat_eqb (n: Nat): Nat -> Bool :=
    elim(Nat) n return (_: Nat) |-> (_: Nat) -> Bool with
    | Zero => (n: Nat) |-> is_zero n
    | Succ => (_: Nat) |-> (g: Nat -> Bool) |-> (l: Nat) |->
        elim(Nat) l return (_: Nat) |-> Bool with
        | Zero => Bool::False
        | Succ => (_: Nat) |-> (_: Bool) |-> g (pred l)
        end
    end
;

Normalize nat_eqb nat_zero nat_zero;
Normalize nat_eqb nat_zero nat_one;
Normalize nat_eqb nat_zero nat_two;
Normalize nat_eqb nat_one nat_zero;
Normalize nat_eqb nat_one nat_one;
Normalize nat_eqb nat_one nat_two;
Normalize nat_eqb nat_two nat_zero;
Normalize nat_eqb nat_two nat_one;
Normalize nat_eqb nat_two nat_two;

Definition nat_add (n: Nat): Nat -> Nat :=
    elim(Nat) n return ((_: Nat) |-> Nat -> Nat) with
    | Zero => (m:Nat) |-> m
    | Succ => (_:Nat) |-> (g:( (_: Nat) -> Nat )) |-> (n: Nat) |-> (Nat::Succ (g n))
    end
;

Normalize nat_add nat_zero nat_zero;
Normalize nat_add nat_zero nat_one;
Normalize nat_add nat_zero nat_two;
Normalize nat_add nat_one nat_zero;
Normalize nat_add nat_one nat_one;
Normalize nat_add nat_one nat_two;

Inductive NatProd: SET with
    | Pair: Nat -> Nat -> NatProd
;

Definition proj0 (nm: NatProd): Nat :=
    elim(NatProd) nm return (_: NatProd) |-> Nat with
    | Pair => (n: Nat) |-> (m: Nat) |-> n
    end
;

Definition proj1 (nm: NatProd): Nat :=
    elim(NatProd) nm return (_: NatProd) |-> Nat with
    | Pair => (n: Nat) |-> (m: Nat) |-> m
    end
;

Definition abel_rel (nm0: NatProd) (nm1: NatProd): Bool :=
    /* (n0, m0) ~ (n1, m1) <=> n0 + m1 = n1 + m0 */
    nat_eqb (nat_add (proj0 nm0) (proj1 nm1)) (nat_add (proj0 nm1) (proj1 nm0))
;

Definition rel_sym_set (nm: NatProd): Power(NatProd) := { y: NatProd | Id(Bool, abel_rel nm y = Bool::True) } ;

Definition number: Power(Power(NatProd)) := { sub_natprod: Power(NatProd) | Exists { y: NatProd | Id(Power(NatProd), sub_natprod = rel_sym_set y) } };

Definition add_num (n: number) (m: number): number :=
    Take (n_rep: { n_rep: NatProd | Id(Power(NatProd), n = rel_sym_set n_rep) }) |->
    Take (m_rep: { m_rep: NatProd | Id(Power(NatProd), m = rel_sym_set m_rep) }) |->
    /*
    rel_sym_set (NatProd::Pair (nat_add (proj0 n_rep) (proj0 m_rep)) (nat_add (proj1 n_rep) (proj1 m_rep))) */
    rel_sym_set (NatProd::Pair Nat::Zero Nat::Zero)
    /*
    1. := ([n]:[number]) -> ([m]:[number]) -> [number]
    2. := ([n]:[number]) -> ([m]:[number]) -> Power(NatProd), 
        => ! 1. =~ 2. but "1. <= 2."
    need cumulativity
    */
;
