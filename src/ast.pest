WHITESPACE = _{ " " | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
keyword = {sort | "elim" | "return" | "with" | "end" |
    "Proof" | "Pow" | "Id" | "Pred" | "Idind" | "take" 
}

sort_set = { "SET" }
sort_prop = { "PROP" }
sort_type = { "TYPE" }
sort_univ = { "UNIV" }
sort = { sort_set | sort_prop | sort_type | sort_univ }

// variable は小文字始まり
variable = @{ &!keyword ~ ('a'..'z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")* }
unused_variable = @{"_"}

// x: T のこと
var_annot = { (variable | unused_variable) ~ ":" ~ expression }

dependent_prod_form = {
    "(" ~ var_annot ~ ")"
    ~ "->" ~ expression
}

dependent_prod_intro = {
    "\\"  ~ var_annot ~ "." ~ expression
}

dependent_prod_elim = {
    "(" ~ expression ~ expression* ~ ")"
}

// inductive_type と constructor の定義
type_name = @{ &!keyword ~ ('A'..'Z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9')* }
constructor_name = @{ &!keyword ~ ('A'..'Z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9')* }

inductive_type = {
    type_name
}

inductive_constructor = ${
    type_name ~ "::" ~ constructor_name
}

inductive_eliminator = {
    "elim" ~ "(" ~ type_name ~ ")" ~ expression ~ "return" ~ expression ~ "with" ~
    ("|" ~ constructor_name ~ "=>" ~ expression)* ~ "end"
}

proof_term = {
    "Proof" ~ expression
}

subset_type = {
    "{" ~ var_annot ~ "|" ~ expression ~ "}"
}

power_type = {
    "Pow" ~ expression
}

predicate = {
    "Pred" ~ expression ~ expression
}

id_exp = {
    "Id" ~ "(" ~ expression ~ ")" ~ expression ~ "=" ~ expression 
}

refl_exp = {
    "Refl" ~ "(" ~ expression ~ ")" ~ expression
}

id_ind = {
    "Idind"
}

take_exp = {
    "take" ~ var_annot ~ "." ~ expression
}

expression = {
    | sort
    | dependent_prod_form
    | dependent_prod_intro
    | dependent_prod_elim
    | inductive_eliminator
    | inductive_constructor
    | inductive_type
    | subset_type
    | power_type
    | predicate
    | take_exp
    | variable
    | expression_readable
}

expression_readable = { "(" ~ expression ~ ")" }

COMMAND_TERMINATE = _{ ";" }

new_definition = {
    "Def" ~ variable ~ ":" ~ expression ~ ":=" ~ expression ~ COMMAND_TERMINATE }

new_assumption = {
    "Assum" ~ variable ~ ":" ~ expression ~ COMMAND_TERMINATE }

new_inductive = {
    "Inductive" ~ type_name ~ ":" ~ arity ~ "with" ~ constructor_definition* ~ COMMAND_TERMINATE
}

// inductive definitions
arity = {
    ( "(" ~ var_annot ~ ")" ~ "->" )* ~ sort
}

constructor_terminate = {
    type_name ~ expression*
}

positive = {
    "(" ~ 
        ( "(" ~ var_annot ~ ")" ~ "->" )*
        ~ constructor_terminate
    ~ ")"
}

constructor_non_occur = {
    "(" ~ var_annot ~ ")" ~ "->" ~ constructor_rec
}

constructor_positive_occur = {
    positive ~ "->" ~ constructor_rec
}

constructor_rec = {
    | constructor_terminate
    | constructor_positive_occur
    | constructor_non_occur
}

constructor_definition = {
    "|" ~ constructor_name ~ ":" ~ constructor_rec
}

// check command 
command_parse = {
    "Parse"
    ~ expression ~ COMMAND_TERMINATE }

command_subst = {
    "Subst"
    ~ expression ~ "[" ~ variable ~ ":=" ~ expression ~ "]" ~ COMMAND_TERMINATE }

command_alpha_eq = {
    "AlphaEq"
    ~ expression ~ "=" ~ expression ~ COMMAND_TERMINATE }

command_top_reduction = {
    "TopReduce" ~ expression ~ COMMAND_TERMINATE }

command_reduction = {
    "Reduce" ~ expression ~ COMMAND_TERMINATE }

command_normalize = {
    "Normalize" ~ expression ~ COMMAND_TERMINATE }

command_beta_equiv = {
    "BetaEq" ~ expression ~ "=" ~ expression ~ COMMAND_TERMINATE }

command_check = {
    "Check" ~ expression ~ ":" ~ expression ~ COMMAND_TERMINATE}

command_infer = {
    "Infer" ~ expression ~ COMMAND_TERMINATE }

command = {
    | command_parse
    | command_check
    | command_infer
    | command_subst
    | command_alpha_eq
    | command_top_reduction
    | command_reduction
    | command_normalize
    | command_beta_equiv
    | new_definition
    | new_assumption
    | new_inductive
}
