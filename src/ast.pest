WHITESPACE = _{ " " | "\n" }

sort_set = { "SET" }
sort_prop = { "PROP" }
sort_type = { "TYPE" }
sort = { sort_set | sort_prop | sort_type }

// variable は小文字始まり
identifier = @{ ('a'..'z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9')* }

type_name = @{ ('A'..'Z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9')* }
constructor_name = @{
    type_name ~  ('A'..'A') ~ ('a'..'z' | 'A'..'Z' | '0'..'9')*
}

var_annot = { identifier ~ ":" ~ expression }

dependent_prod_form = {
    "(" ~ var_annot ~ ")"
    ~ "->" ~ expression
}

dependent_prod_intro = {
    "\\"  ~ var_annot ~ "." ~ expression
}

dependent_prod_elim = {
    "(" ~ expression ~ expression ~ ")"
}

subset_type = {
    "{" ~ var_annot ~ "|" ~ expression ~ "}"
}

take_exp = {
    "take" ~ var_annot ~ "." ~ expression
}

rec_exp = {
    "rec" ~ var_annot ~ var_annot ~ "="
}

expression = {
    | sort
    | dependent_prod_form
    | dependent_prod_intro
    | dependent_prod_elim
    | identifier
    | expression_readable
}

expression_readable = { "(" ~ expression ~ ")" }

COMMAND_TERMINATE = _{ "." }

new_definition = { "def" ~ identifier ~ ":=" ~ expression ~ COMMAND_TERMINATE }
new_assumption = { "assum" ~ identifier ~ ":" ~ expression ~ COMMAND_TERMINATE }

new_command = {
    | new_definition
    | new_assumption
}

command_parse = { "Parse" ~ expression ~ COMMAND_TERMINATE }
command_check = { "Check" ~ expression ~ ":" ~ expression ~ COMMAND_TERMINATE}
command_infer = { "Infer" ~ expression ~ COMMAND_TERMINATE }
command_alpha_eq = { "Alpha_eq" ~ expression ~ "=" ~ expression ~ COMMAND_TERMINATE }
command_weak_reduction = { "Weak_reduction" ~ expression ~ COMMAND_TERMINATE }
command_reduction = { "Reduce" ~ expression ~ COMMAND_TERMINATE }
command_normalize = { "Normalize" ~ expression ~ COMMAND_TERMINATE }

command = {
    | command_parse
    | command_check
    | command_alpha_eq
    | command_weak_reduction
    | command_reduction
    | command_normalize
}
