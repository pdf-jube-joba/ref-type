use crate::syntax::{Identifier, SExp, MacroToken, Bind};
use either::Either;
use lalrpop_util::ParseError;

grammar;

pub SortAst: kernel::exp::Sort = {
  "\\Prop" => kernel::exp::Sort::Prop,
}

Ident: Identifier = <s:r"[a-zA-Z][a-zA-Z0-9_]*"> => Identifier(String::from(s));

MacTok: MacroToken = {
  <s:r"[1!23#4$5%6&7'890=\-~^`@{\[\+*\]},<.>?/_\\]"> => MacroToken(String::from(s)),
}

pub SExpAll = {
  ArrowSeparated,
  Combined,
}

Atom: SExp = {
  <s: SortAst> => SExp::Sort(s),
  <v: Ident> => SExp::Var(v),
  "(" <e: SExpAll> ")" => e,
  "$(" <seq: SeqTok> "$)"  => SExp::MathMacro { tokens: seq },
}

Combined: SExp = {
  <funcast: Atom> <argast: Combined> => SExp::App { func: Box::new(funcast), arg: Box::new(argast), piped: false },
  <argast: Atom> "|" <funcast: Combined> => SExp::App { func: Box::new(funcast), arg: Box::new(argast), piped: true },
  Atom,
}

ArrowSeparated: SExp = {
  <bdast: Binder> "->" <bodyast: ArrowSeparated> => SExp::Prod { bind: bdast, body: Box::new(bodyast)},
  <bdast: Binder> "=>" <bodyast: ArrowSeparated> => SExp::Lam { bind: bdast, body: Box::new(bodyast)},
}

Binder: Bind = {
  "(" <v: Ident> ":" <e: SExpAll> ")" => Bind { var: Some(v), ty: Box::new(e), predicate: None },
  <e: Combined> => Bind { var: None, ty: Box::new(e), predicate: None },
}

SeqTok: Vec<Either<MacroToken, SExp>> = {
  <a: Atom> <seq: SeqTok> => {
    let mut v = seq;
    v.push(Either::Right(a));
    v
  },
  <t: MacTok> <seq: SeqTok> => {
    let mut v = seq;
    v.push(Either::Left(t));
    v
  },
}
