command = { WHITESPACE* ~ COMMENT* ~ (
    command_parse
    | show_command
    | lambda_calculus_command
    | typing_command
    | new_command
    | PROOF
) ~ COMMAND_TERMINATE ~ COMMENT* }

command_CONFIG = {
    "GOALS" | "SUCCS" | "ALL"
}

COMMAND_TERMINATE = _{ ";" }
FAIL = { "!" }

command_parse = {
    "Parse" ~
    expression
}

show_command = {
    "Show" ~ (
    show_goal
    )
}

show_goal = {
    "goal"
}

lambda_calculus_command = {
    command_subst
    | command_alpha_eq
    | command_top_reduction
    | command_reduction
    | command_normalize
    | command_beta_equiv
}

    command_subst = {
        "Subst" ~
        expression ~ "[" ~ variable ~ ":=" ~ expression ~ "]"
    }

    command_alpha_eq = {
        FAIL? ~ "AlphaEq" ~
        expression ~ "=" ~ expression
    }

    command_top_reduction = {
        "TopReduce" ~
        expression
    }

    command_reduction = {
        "Reduce" ~ 
        expression
    }

    command_normalize = {
        "Normalize" ~ (normalize_opt)? ~ expression
    }
        normalize_opt = {
            "!"
        }

    command_beta_equiv = {
        FAIL? ~ "BetaEq" ~ expression ~ "=" ~ expression
    }

typing_command = {
    FAIL? ~ (
        command_check
        | command_infer
        | command_theorem
    )
}

    command_check = {
        "Check" ~ ("(" ~ command_CONFIG ~ ")")? ~ expression ~ ":" ~ expression
    }

    command_infer = {
        "Infer" ~ ("(" ~ command_CONFIG ~ ")")? ~ expression
    }

    command_theorem = {
        "Theorem" ~ ("(" ~ command_CONFIG ~ ")")? ~ expression
    }

new_command = {
    FAIL? ~ (
        new_definition
        | new_assumption
        | new_inductive
    )
}

    new_definition = {
        "Definition" ~ ("(" ~ command_CONFIG ~ ")")? ~ 
        variable ~ var_annot_paren* ~ ":" ~ expression ~ ":=" ~ expression
    }

    new_assumption = {
        "Assumption" ~ ("(" ~ command_CONFIG ~ ")")? ~ 
        variable ~ ":" ~ expression 
    }

    new_inductive = {
        "Inductive" ~ ("(" ~ command_CONFIG ~ ")")? ~ 
        name ~ (var_annot_paren)* ~ ":" ~ arity ~ "with" ~ constructor_definition*
    }

    arity = {
        ( var_annot_paren ~ "->" )* ~ sort
    }

    constructor_definition = {
    "|" ~ name ~ ":" ~ ((var_annot_paren | small | positive) ~ "->")* ~ constructor_terminate
    }

    constructor_terminate = {
        name ~ expression*
    }

    positive = {
        "[" ~ ( var_annot_paren ~ "->" )* ~ constructor_terminate ~ "]"
    }
